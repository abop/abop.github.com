<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Goofy's Blog]]></title>
  <link href="http://javame.tk/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://javame.tk/"/>
  <updated>2013-05-15T12:05:59+08:00</updated>
  <id>http://javame.tk/</id>
  <author>
    <name><![CDATA[Goofy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maven, Webx, Velocity 学习总结]]></title>
    <link href="http://javame.tk/blog/2011/07/24/maven-webx-velociry-note/"/>
    <updated>2011-07-24T00:00:00+08:00</updated>
    <id>http://javame.tk/blog/2011/07/24/maven-webx-velociry-note</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#overview">综述</a></li>
<li><a href="#maven">Maven</a>

<ul>
<li><a href="#maven_basics">Maven基础</a></li>
<li><a href="#pom">POM基础</a></li>
<li><a href="#dependency">依赖管理</a></li>
</ul>
</li>
<li><a href="#webx">Webx</a>

<ul>
<li><a href="#one_m_webx">一分钟Webx框架开发</a>

<ul>
<li><a href="#turbine">处理页面的基本流程（Turbine）</a></li>
<li><a href="#layer">Webx各层我们要做的工作的工作</a></li>
</ul>
</li>
<li><a href="#webx_platform">Webx框架初探</a>

<ul>
<li><a href="#webx_basics">Webx的基本概念</a></li>
<li><a href="#webx_dir_structure">Webx项目目录结构</a></li>
<li><a href="#webx_start_process">Webx应用启动流程</a></li>
<li><a href="#webx_request_handdling">Webx响应和处理请求的流程</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#velocity">Velocity</a></li>
<li><a href="#ibatis">Ibatis</a>

<ul>
<li><a href="#ibatis_use">Ibatis的作用</a></li>
<li><a href="#ibatis_config">Ibatis的配置</a></li>
</ul>
</li>
<li><a href="#ref">参考资料</a></li>
</ul>


<!-- more -->




<h2 id="overview">综述</h2>


<p>这两周的时间，通过看指南，看代码，跑实例，对淘宝网web应用开发框架有了一个整体的初步认识，主要包括四个方面：</p>

<ol>
<li><p>项目管理工具Maven</p></li>
<li><p>MVC框架Webx。</p></li>
<li><p>Webx中的View层实现——Velocity</p></li>
<li><p>Webx中的Model持久层实现——Ibatis</p></li>
</ol>


<h2 id="maven">Maven</h2>




<h3 id="maven_basics">Maven基础</h3>


<ol>
<li><p>坐标是指项目的唯一标识，以GAV（groupId，artifactId和version）区分， groupId包含公司和内部组（或产品线）的信息，如com.taobao.mercury，表示taobao.com下的mercury项目组；ArtifactId则表示项目的名称，如mercury-web，Version则表示某一Artifact的版本，如1.0-SNAPSHOT</p></li>
<li><p>依赖是指项目所依赖的相关jar包</p></li>
<li><p>仓库是指存放项目的产出（Artifact）的仓库，如<a href="http://mvnrepo.taobao.ali.com/mvn/repository">http://mvnrepo.taobao.ali.com/mvn/repository</a></p></li>
<li><p>插件是Maven的设计机制，Maven包含一个核心功能组件，而扩展功能都是通过插件完成，即使我们最常见的编译功能也是通过compiler插件完成的。</p></li>
</ol>


<h3 id="pom">POM基础</h3>


<p>一个pom.xml文件包含以下基本信息：modelVersion, groupId, artifactId, version, packaging, name, description, url, licenses, scm, connection, developers</p>

<h3 id="dependency">依赖管理</h3>


<ol>
<li><p>依赖定义具体到version</p></li>
<li><p>依赖可以传递</p></li>
<li><p>&lt;scope>标签定义依赖项的生效范围</p></li>
<li><p>依赖的版本定义在父pom（项目pom）中，子pom（模块pom）设置&lt;parent>，继承父pom</p>

<p> <img src="/images/pom.jpg" alt="pom" /></p></li>
<li><p>设置一个虚拟的总项目，多个实际项目作为总项目的模块</p></li>
</ol>


<h2 id="webx">Webx</h2>




<h3 id="one_m_webx">一分钟Webx框架开发</h3>




<h4 id="turbine">理页面的基本流程（Turbine）</h4>


<p>Webx是采用MVC三层架构。请求的上下文信息（RequestContext、ServletContext、HttpServletRequest、HttpServletResponse）被封装为RunData对象。在Web层和Biz层之间采用command模式实现对请求的处理。由MappingRuleService将请求分发到同名的业务处理类进行处理，处理结果被封装为Result对象。然后按照业务逻辑将所需信息放到TemplateContext中，由velocity取得并对VM模板进行渲染。最后产出的页面输出给用户。</p>

<p>有的请求并不要求返回页面，只需处理业务逻辑。</p>

<p>整个处理流程的控制由Pipeline（水管）中配置各种Valve（阀门）实现，简易的流程图如下：</p>

<p><img src="/images/req_process.gif" alt="pipeline" /></p>

<h4 id="layer">Webx各层我们要做的工作的工作</h4>


<ul>
<li><p>V层(Web)：采用Velocity书写vm模版，书写一个同名的Java类来接收Command，并处理业务逻辑（void execute(RunData,TemplateContext)），并根据处理得到的结果(Result对象)，准备好vm模版中所需要的数据（TemplateContext.put(String key, Object value)）。</p></li>
<li><p>C层(Biz)：书写AO对象处理Command，请求的上下文信息被封装在RunData对象中。AO中只包含简单的逻辑处理，真正的业务处理通常书写在Manager中。</p></li>
<li><p>M层(ibatis)：书写DAO对象负责和数据交互，持久层使用的是Ibatis。需要我们来建立数据物理模型并书写数据库操作的SQL语句。</p></li>
</ul>


<h3 id="webx_platform">Webx框架初探</h3>




<h4 id="webx_basics">Webx的基本概念</h4>


<ol>
<li><p>页面驱动：以页面（view）为主导，先写页面，再写和页面配套的程序模块，通过规则，查找页面所对应的程序模块</p></li>
<li><p>Pull Tools：有一些定义在webx.xml中，另一些默认定义在框架中。这些tools可以再vm模板中被直接引用。Global作用域的tool在系统初始化时创建，Request作用域的tool在每次HTTP请求时创建。</p></li>
<li><p>Modules：turbine中的基本编程模块。Screen用来处理页面显示逻辑；Control和screen类似，但可以被别的screen或layout引用；Action处理用户提交表单。所有module都实现Module接口：public interface Module {void execute(RunData rundata) throws WebxException;}</p></li>
</ol>


<h4 id="webx_dir_structure">Webx项目目录结构</h4>


<pre><code>mercury  
├─assets
├─biz
│ ├─src  
│ │ ├─main.java.com.taobao
│ │ │ │ └─mercury
│ │ │ │ ├─amend
│ │ │ │ ├─ao
│ │ │ │ │ ├─correct
│ │ │ │ │ │ └─impl
│ │ │ │ │ └─impl
│ │ │ │ ├─aop
│ │ │ │ ├─biz
│ │ │ │ │ ├─domain
│ │ │ │ │ │ ├─mysqlmap
│ │ │ │ │ │ ├─oracle
│ │ │ │ │ │ ├─rowkey
│ │ │ │ │ │ └─sajiao
│ │ │ │ │ └─util
│ │ │ │ ├─cache
│ │ │ │ ├─dal
│ │ │ │ │ └─sajiao
│ │ │ │ ├─mananger
│ │ │ │ │ └─sajiao
│ │ │ │ ├─notify
│ │ │ │ ├─ob
│ │ │ │ │ ├─ao
│ │ │ │ │ ├─dal
│ │ │ │ │ └─mananger
│ │ │ │ ├─query
│ │ │ │ └─timetask
│ │ │ └─resources
│ │ └─test
│ └─target
├─deploy
├─protocal
│ ├─.settings
│ ├─src
│ │ ├─main.java.com.taobao
│ │ │ ├─common
│ │ │ │─mercury
│ │ │ │ ├─domain
│ │ │ │ └─util
│ │ │ └─partition
│ │ └─test
│ └─target
└─web
   ├─.settings
   ├─src
   │ ├─main
   │ │ ├─assembly
   │ │ ├─filter
   │ │ ├─java.com.taobao.mercury.web
   │ │ │ ├─common
   │ │ │ │ ├─service
   │ │ │ │ ├─session
   │ │ │ │ ├─util
   │ │ │ │ └─valve
   │ │ │ └─module
   │ │ │ ├─action
   │ │ │ ├─control
   │ │ │ └─screen
   │ │ ├─resources
   │ │ │ ├─biz
   │ │ │ │ ├─bean
   │ │ │ │ └─persistence
   │ │ │ └─top
   │ │ │ └─config
   │ │ └─webapp
   │ │ ├─common
   │ │ │ └─templates
   │ │ │ └─screen
   │ │ ├─default
   │ │ │ └─templates
   │ │ │ ├─control
   │ │ │ ├─layout
   │ │ │ └─screen
   │ │ ├─META-INF
   │ │ └─WEB-INF
   │ │ ├─common
   │ │ └─default
   │ └─test.java.com.taobao.mercury
   └─target
</code></pre>

<h4 id="webx_start_process">Webx应用启动流程</h4>


<p>Webapp\WEB-INF\web.xml是SpringExt的配置文件，下面是mercury-web中的样本：</p>

<p>```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;GB2312&rdquo;?></p>

<p>&lt;web-app version=&ldquo;2.4&rdquo; xmlns=&ldquo;<a href="http://java.sun.com/xml/ns/j2ee">http://java.sun.com/xml/ns/j2ee</a>&rdquo;</p>

<p>xmlns:xsi=&ldquo;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&rdquo;</p>

<p>xsi:schemaLocation=&ldquo;<a href="http://java.sun.com/xml/ns/j2ee">http://java.sun.com/xml/ns/j2ee</a> <a href="http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd</a>&rdquo;></p>

<p>&lt;context-param></p>

<p>&lt;param-name>loggingRoot&lt;/param-name></p>

<p>&lt;param-value>${mercury.loggingRoot}&lt;/param-value></p>

<p>&lt;/context-param></p>

<p>&hellip;&hellip;</p>

<p><listener>&lt;listener-class>com.alibaba.citrus.logconfig.LogConfiguratorListener&lt;/listener-class></p>

<p></listener></p>

<!-- ???/WEB-INF/webx.xml, /WEB-INF/webx-*.xml -->


<p><listener></p>

<p>&lt;listener-class>com.alibaba.citrus.webx.context.WebxContextLoaderListener&lt;/listener-class></p>

<p></listener></p>

<p>&hellip;&hellip;</p>

<p><filter></p>

<p>&lt;filter-name>sessionFilter&lt;/filter-name></p>

<p>&lt;filter-class>com.taobao.session.TaobaoSessionFilter&lt;/filter-class></p>

<p>&lt;init-param></p>

<p>&lt;param-name>tbsessionConfigGroup&lt;/param-name></p>

<p>&lt;param-value>${mercury.session.filter.group.name}&lt;/param-value></p>

<p>&lt;/init-param></p>

<p>&lt;init-param></p>

<p>&lt;param-name>isloginSessionCheck&lt;/param-name></p>

<p>&lt;param-value>true&lt;/param-value></p>

<p>&lt;/init-param></p>

<p></filter></p>

<p>&lt;filter-mapping></p>

<p>&lt;filter-name>sessionFilter&lt;/filter-name></p>

<p>&lt;url-pattern>*.htm&lt;/url-pattern></p>

<p>&lt;/filter-mapping></p>

<p>&hellip;&hellip;</p>

<p><filter></p>

<p>&lt;filter-name>timer&lt;/filter-name></p>

<p>&lt;filter-class>com.alibaba.webx.filter.timer.TimerFilter&lt;/filter-class></p>

<p>&lt;init-param></p>

<p>&lt;param-name>threshold&lt;/param-name></p>

<p>&lt;param-value>${mercury.timer.threshold}&lt;/param-value></p>

<p>&lt;/init-param></p>

<p></filter></p>

<p>&lt;filter-mapping></p>

<p>&lt;filter-name>timer&lt;/filter-name></p>

<p>&lt;url-pattern>/*&lt;/url-pattern></p>

<p>&lt;/filter-mapping></p>

<p><filter></p>

<p>&lt;filter-name>webx&lt;/filter-name></p>

<p>&lt;filter-class>com.alibaba.citrus.webx.servlet.WebxFrameworkFilter&lt;/filter-class></p>

<p></filter></p>

<p><filter></p>

<p>&lt;filter-name>mdc&lt;/filter-name></p>

<p>&lt;filter-class>com.alibaba.citrus.webx.servlet.SetLoggingContextFilter&lt;/filter-class></p>

<p></filter></p>

<p>&lt;filter-mapping></p>

<p>&lt;filter-name>mdc&lt;/filter-name></p>

<p>&lt;url-pattern>/*&lt;/url-pattern></p>

<p>&lt;/filter-mapping></p>

<p>&lt;filter-mapping></p>

<p>&lt;filter-name>webx&lt;/filter-name></p>

<p>&lt;url-pattern>/*&lt;/url-pattern></p>

<p>&lt;/filter-mapping></p>

<p>&lt;welcome-file-list></p>

<p>&lt;welcome-file>index.html&lt;/welcome-file></p>

<p>&lt;welcome-file>index.jsp&lt;/welcome-file></p>

<p>&lt;/welcome-file-list></p>

<!-- ====================================================== -->




<!-- error pages -->




<!-- ====================================================== -->


<p>&lt;error-page></p>

<p>&lt;error-code>400&lt;/error-code></p>

<p><location>/error.html</location></p>

<p>&lt;/error-page></p>

<p>&hellip;&hellip;</p>

<p>&lt;/web-app></p>

<p>```</p>

<p>一个Webx应用的启动流程如下：</p>

<ol>
<li><p>初始化context-param</p></li>
<li><p>执行各个listener，其中WebxContextLoaderListener初始化被Webx包装过的XmlWebApplicationContext（spring容器）及各个子容器，各种webx.xml里定义beans（包括&lt;service>标签定义的服务）都被装载。</p></li>
<li><p>加载各个filter：其中TimerFilter（timer）用来记录serverlet执行时间，WebxFrameworkFilter（webx）用来处理web请求，SetLoggingContextFilter（mdc）用来通过SLF4J MDC来记录用户和请求的信息。三者顺序为timer->webx->mdc。</p></li>
</ol>


<blockquote><p><a href="http://ajava.org/readbook/J2EE/servletjsphxbc2/17212.html">web.xml中各种元素的含义</a></p></blockquote>

<h4 id="webx_request_handdling">Webx响应和处理请求的流程</h4>


<p>（VIA: <a href="http://openwebx.org/docs/webxframework.html#d0e1895">Webx框架指南</a>）</p>

<p>当一个HTTP请求到达时，首先由WebxFrameworkFilter接手这个请求（参考Webx应用启动流程），下图是WebxFrameworkFilter处理一个WEB请求的过程：</p>

<p><img src="/images/webx_req_process.jpg" alt="webxProcess" /></p>

<p>如图所示，WebxFrameworkFilter接到请求以后，就会调用WebxRootController。从这里开始，进入Spring的世界。此后所有的对象：WebxRootController、WebxController、RequestContext、Pipeline等，全部是通过SpringExt配置在Spring Context中的。</p>

<p>WebxRootController对象存在于root context中，它被所有子应用所共享。它会创建RequestContext实例，从而增强request、response、session的功能。接下来，WebxController对象会被调用。</p>

<p>WebxController对象是由每个子应用独享的，子应用app1和app2可以有不同的WebxController实现。默认的实现，会调用pipeline。</p>

<p>Pipeline也是由各子应用自己来配置的。假如pipeline碰到无法处理的请求，如静态页面、图片等，pipeline应当执行&lt;exit/> valve强制退出。然后WebxRootController就会“放弃控制”，这意味着request将被返还给/WEB-INF/web.xml中定义的servlet、filter或者返还给servlet engine本身来处理。</p>

<p>webapp\common\pipeline.xml配置了mercury-web的PipeLine：</p>

<p>```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo; ?></p>

<p>&lt;beans:beans xmlns:services=&ldquo;<a href="http://www.alibaba.com/schema/services">http://www.alibaba.com/schema/services</a>&rdquo;</p>

<p>&hellip;&hellip;</p>

<p>xsi:schemaLocation=&ldquo;<a href="http://www.alibaba.com/schema/services">http://www.alibaba.com/schema/services</a></p>

<p>&hellip;&hellip; "</p>

<blockquote></blockquote>

<p>&lt;services:pipeline</p>

<p>xmlns=&ldquo;<a href="http://www.alibaba.com/schema/services/pipeline/valves">http://www.alibaba.com/schema/services/pipeline/valves</a>&rdquo;></p>

<p><prepareForTurbine /></p>

<p><prepareForWebx2/></p>

<p>&lt;pl-valves:try-catch-finally></p>

<p>&lt;pl-valves:try></p>

<p>&lt;webx2-valve class=&ldquo;com.alibaba.turbine.pipeline.SetLoggingContextValve&rdquo; /></p>

<p>&lt;webx2-valve class=&ldquo;com.taobao.mercury.web.common.valve.DefaultAnalyzeURLValve&rdquo; /></p>

<p>&lt;webx2-valve</p>

<p>class=&ldquo;com.taobao.mercury.web.common.valve.SecurityCheckValve&rdquo; /></p>

<p>&lt;webx2-valve class=&ldquo;com.taobao.mercury.web.common.valve.SessionValve&rdquo; /></p>

<p>&lt;webx2-valve class=&ldquo;com.taobao.common.pagecache.webx.PageCacheValve&rdquo;</p>

<p>p:action=&ldquo;start&rdquo; /></p>

<p><loop></p>

<p><choose></p>

<p><when></p>

<p>&lt;pl-conditions:target-extension-condition</p>

<p>extension=&ldquo;vm, jsp&rdquo; /></p>

<p><performAction /></p>

<p><performTemplateScreen /></p>

<p><renderTemplate /></p>

<p></when></p>

<p><when></p>

<p>&lt;pl-conditions:target-extension-condition</p>

<p>extension=&ldquo;do&rdquo; /></p>

<p><performAction /></p>

<p><performScreen /></p>

<p></when></p>

<p><otherwise></p>

<p><exit /></p>

<p></otherwise></p>

<p></choose></p>

<p><breakUnlessTargetRedirected /></p>

<p></loop></p>

<p>&lt;/pl-valves:try></p>

<p>&lt;pl-valves:finally></p>

<p>&lt;webx2-valve class=&ldquo;com.taobao.common.pagecache.webx.PageCacheValve&rdquo;</p>

<p>p:action=&ldquo;end&rdquo; /></p>

<p>&lt;webx2-valve class=&ldquo;com.taobao.mercury.web.common.valve.SessionValve&rdquo;</p>

<p>p:action=&ldquo;clean&rdquo; /></p>

<p>&lt;webx2-valve class=&ldquo;com.alibaba.turbine.pipeline.SetLoggingContextValve&rdquo;</p>

<p>p:action=&ldquo;cleanup&rdquo; /></p>

<p>&lt;/pl-valves:finally></p>

<p>&lt;/pl-valves:try-catch-finally></p>

<p>&lt;/services:pipeline></p>

<p>&lt;/beans:beans>
```</p>

<p>假设用户以URL：<a href="http://favorite.daily.taobao.net/collect_list.htm">http://favorite.daily.taobao.net/collect_list.htm</a> 来访问Webx应用。WebxFrameworkFilter接收请求，并且一路顺利到达pipeline。然后Pipeline开始依次执行它的valves（下面的描述略过一些相对次要的步骤）：</p>

<ol>
<li><p>&lt;analyzeURL> &ndash; 分析URL</p>

<p> 分析URL的目的是取得target，这里取得的target是collect_list.htm。如果用户访问的URL中并没有提供path信息，通常被理解为：用户想要访问“主页”。AnalyzeURL valve提供了一个可选的参数“homepage”，即是在这种情况下起作用。得到的target为“homepage”。</p>

<p> 需要注意的是，target不代表模板名，也不代表类名。Target只是一个抽象的概念 —— 当前页面需要达成的目标。Target可能被后续的valves解释成模板名、类名或者其它东西。</p></li>
<li><p>进入&lt;choose> &ndash; 多重分支</p>

<p> 很明显，“collect_list.htm”满足了第一个&lt;when>所附带的条件：&lt;target-extension-condition extension=&ldquo; vm, jsp&rdquo;>，意思是target的后缀为“jsp”或为“vm”。</p></li>
<li><p>&lt;performAction> &ndash; 执行action</p>

<p> 和其它框架中的action概念不同，在Webx Turbine中，action是用来处理用户提交的表单的。因为本次请求未提供action参数，所以跳过该步骤。</p></li>
<li><p>&lt;performTemplateScreen> &ndash; 查找并执行screen。</p>

<p> 如果target-extension为”do”，则没有&lt;performTemplateScreen>这个valve。</p>

<p> 这里要用到一个规则：target映射成screen module类名的规则。</p>

<p> 假设target为xxx/yyy/zzz，那么Webx Turbine会依次查找下面的screen模块：</p>

<blockquote><ol>
<li><p>screen.xxx.yyy.Zzz，</p></li>
<li><p>screen.xxx.yyy.Default，</p></li>
<li><p>screen.xxx.Default，</p></li>
<li><p>screen.Default。</p></li>
</ol>
</blockquote>

<p> 本次请求的target为collection_list.htm，因此它会尝试查找screen.collection_list类。</p>

<p> 如果找到screen类，Webx Turbine就会执行它。Screen类的功能，通常是读取数据库，然后把模板所需要的对象放到TemplateContext中。</p>

<p> 如果找不到，也没关系 —— 这就是“页面优先”：一些页面没有业务逻辑，因此不需要screen类，只需要有模板就可以了。</p></li>
<li><p>&lt;renderTemplate> &ndash; 渲染模板</p>

<p> 这里用到两个规则：target映射成screen template，以及target映射成layout template。</p>

<p> 假设target为xxx/yyy/zzz，那么Webx Turbine会查找下面的screen模板：/templates/screen/xxx/yyy/zzz。Screen模板如果未找到，就会报404 Not Found错误。找到screen模板以后，Webx Turbine还会试着查找下面的layout模板：</p>

<blockquote><ol>
<li><p>/templates/layout/xxx/yyy/zzz</p></li>
<li><p>/templates/layout/xxx/yyy/default</p></li>
<li><p>/templates/layout/xxx/default</p></li>
<li><p>/templates/layout/default</p></li>
</ol>
</blockquote>

<p> Layout模板如果找不到，就直接渲染screen模板；如果存在，则把渲染screen模板后的结果，嵌入到layout模板中。</p>

<p>Layout模板和screen模板中，都可以调用control。每个页面只有一个screen，却可以有任意多个controls。</p></li>
<li><p>&lt;breakUnlessTargetRedirected> &ndash; 内部重定向</p>

<p> 在screen和action中，可以进行“内部重定向”。内部重定向实质上就是由&lt;breakUnlessTargetRedirected>实施的 —— 如果没有重定向标记，就退出；否则循环到&lt;loop>标签。</p>

<p> 和外部重定向不同，外部重定向是向浏览器返回一个302或303 response，其中包含Location header，浏览器看到这样的response以后，就会发出第二个请求。而内部重定向发生在pipeline内部，浏览器并不了解内部重定向。</p></li>
</ol>


<h2 id="velocity">Velocity部分</h2>


<p>尚未系统学习，只是看代码做了一些了解。</p>

<ol>
<li><p>模板以.vm为后缀名</p></li>
<li><p>$a：美元符“$”加上java中的引用名。可以引用的对象包括内置的对象，pull Service中pull到的对象，业务处理中put进TemplateContext中的对象</p></li>
<li><p>#set($a = $b)：声明变量并赋值；</p></li>
<li><p>##：velocity行注释</p></li>
<li><p>#if #elseif #else判断选择，最后用#end闭合</p></li>
</ol>


<h2 id="ibatis">Ibatis部分</h2>




<h3 id="ibatis_use">Ibatis的作用</h3>


<p>Ibatis将数据库中的数据转换为java中的对象，方便C层对数据进行操作</p>

<h3 id="ibatis_config">Ibatis的配置</h3>


<ol>
<li><p>属性文件*-persistence.xml</p></li>
<li><p>总配置文件SqlMap-Config.xml</p></li>
<li><p>映射文件collection_item_mapping.xml</p></li>
</ol>


<h2 id="ref">参考资料</h2>

]]></content>
  </entry>
  
</feed>
